1) 
10+2

2)
val msg = "Hello World"

3)
msg="Hello!"

4)
var msg = "Hello World"

5)
msg="Hello!"

6)
msg = 3

7)
val x = {val a=10;val b=100; b-a}

8)
val file = scala.io.Source.fromFile("vikas").mkString

val  m = { print ("foo "); 1}


10)
var x = 5

11)
val s = if (x> 0 && x<6) 1 else 0

vim Demo_1.scala

Object Demo_1{
def main(args:Array[String]) {
var x=15;
if( x<20) {
println("This is if statement");
}
} }


12)
val t = if (x> 0 && x<6) "positive" else "negative"

13)
var args = "hello"

14)
args.foreach(arg=>println(arg))

15)
args.foreach(println)

val x = List(1,2,3)
x.foreach{println}


16)
for(i<-1 to 5)
println(i)

17)
val in  = "hello world"
var sum = 0
for (i<-0 until in.length) sum+=i
print(sum)

18)
for(i<-1 to 3;j<-1 to 3)
println(10*i+j)

19)
for(i<-1 to 3;j<-1 to 3 if i==j) println(10*i+j)

20)
for(i<-1 to 3;x=4-i;j<- x to 3) println(10*i+j)

21)
val x = for(i<-1 to 20)yield i*2.5
for (i<-x) println(i)

while loop
vim Demo_4.scala
Object Demo_4{
def main(args:Array[String]) {
var a=10;
while( a<20) {
println("value of a = " + a);
a= a+1;
}
} }


dowhile loop
var nodb = 2

do {
nodb +=1
println(s"nodb = $nodb")
}while(nodb < 10)



22)

def sayhello() {
println("Hello")
}

def sum(a:Int,b:Int) {
println(a+b)
}

sum(2,5)

def func():Int={
return 7
}


def sum(a:Int,b:Any):Any= {
println("hello")
}



23)
def factorial(n:Int):Int=if(n==0)1 else n*factorial(n-1)

Object Demo{
def main(args:Array[String]) = {
var result= functionExamp(15,2)
println(result)
}
def functionExamp(a:Int,b:Int):Int={
if(b == 0)
0
else
a+functionExamp(a,b-1)
} }


24)


25)
def rect_area(length:Float,breadth:Float)
{ val area = length*breadth; print(area)}

26)

Arrays with values

var a = Array(1,2,3)
a(4)
a(0)

Arrays without values
var a = new Array[Int](3)
a(1)
a(1)= 2
a
 


val a = new Array[Int](10)
val s = new Array[String](10)
val st = Array("Hello","world")

27)
import scala.collection.mutable.ArrayBuffer
val a = ArrayBuffer[Int]()
a +=1
a +=(2,3,5)
a ++=Array(6,7,8)

28) List
val list = 1 :: 2 :: 3 :: Nil
val list = List(1,2,3)
val x = List(1,2.0,33D,4000L)
val x = List.range(1,10)
val x = List.fill(3)("foo")
val x = List.tabulate(5)(n=>n*n)

import scala.collection.mutable.ListBuffer
var fruits = new ListBuffer[String]()
fruits += "Apple"
fruits += ("strawberry","kiwi")
fruits -= ("Apple","kiwi")
val fruitslists = fruits.toList


val x = List(3)
val y = 1 :: 2 :: x
val z = -1 :: y

val originalList1 = List(7,8,4,3,2)
val newList1 = originalList1.filter(_>3)

val p = List(111,200,321)
val q = List(4,-5,60)
val r =  p ++ q
val r = p ::: q
val r = List.concat(p,q)


val lst = List(1,2,3,4,5,6,7,8)
lst.head
lst.tail

def sum(l: List[Int]):Int = { if(l == Nil) 0 else l.head + sum(l.tail)}
val y = sum(lst)



33)Tuples

val a = (1,4, "Bob", "Jack")
a._2
a _2

val ab = (4,3,2,1)
ab.productIterator.foreach{ i => println("value ="+i)}
val t =("exam","test")
println(("swapped Tuple: " + t.swap)
val mn = (1,"wonderful",20.2356)
println("concatenated String: " + mn.toString())



34) set
var s : Set[Int] = Set(1,3,5,7)
var s1 = Set(7,9,8,9)
var s2 = Set(10,11,12,13)
s1++s2
var x1 = Set(7,9,8,9)
var x2 = Set(10,11,12,13)
x1.++(x2)

var a1 = Set(11,44,33,22)
var b1 = Set(77,99,22,88)
a1.&(b1)

var a1 = Set(11,44,33,22)
var b1 = Set(77,99,22,88)
a1.intersect(b1)

35)
val mapping = Map("Vishal"-> "Kumar","Vijay" -> "verma")
mapping.keys.foreach{i=>println(i+" "+mapping(i))}
mapping.contains("Vishal")


kanchantale@gmail.com